"""
Network Switch SVG Generator - SVG Module
----------------------------
This module contains the SVG generation methods for the switch SVG generator.
"""

from typing import List
from .core_base import SwitchModel


def generate_svg_header(self, adjusted_width: int, adjusted_height: int) -> List[str]:
    """
    Generate the SVG header content.
    
    Args:
        adjusted_width: The calculated width of the SVG
        adjusted_height: The calculated height of the SVG
        
    Returns:
        List of SVG header lines
    """
    svg = [
        f'<?xml version="1.0" encoding="UTF-8" standalone="no"?>',
        f'<svg width="{adjusted_width}" height="{adjusted_height}" xmlns="http://www.w3.org/2000/svg">',
        f'  <!-- Network Switch SVG generated by SwitchSVGGenerator -->',
        f'  <!-- {self.num_ports} port switch ({self.switch_model.value}) -->',
        f'  <!-- Generated with theme: {self.theme.value} -->',
        f'  <!-- Background for entire image -->',
        f'  <rect x="0" y="0" width="{adjusted_width}" height="{adjusted_height}" fill="{self.theme_colors["background"]}" />'
    ]
    return svg


def generate_switch_body(self, adjusted_width: int, adjusted_height: int) -> List[str]:
    """
    Generate the SVG content for the switch body.
    
    Args:
        adjusted_width: The calculated width of the SVG
        adjusted_height: The calculated height of the SVG
        
    Returns:
        List of SVG lines for the switch body
    """
    svg = []
    svg.append(f'  <!-- Switch body -->')
    
    # Use the switch_height for the body height
    body_height = self.switch_height - 20  # -20 for the margins (10px top and bottom)
    
    # Use the body_width calculated in calculate_dimensions
    # This ensures equal spacing on both sides of the switch
    body_width = self.body_width
        
    svg.append(f'  <rect x="10" y="10" width="{body_width}" height="{body_height}" '
              f'rx="10" ry="10" fill="{self.switch_body_color}" '
              f'stroke="{self.switch_body_border_color}" stroke-width="{self.switch_body_border_width}" />')
    return svg


def generate_switch_details(self, adjusted_width: int) -> List[str]:
    """
    Generate the SVG content for the switch details (name, model, etc.).
    
    Args:
        adjusted_width: The calculated width of the SVG
        
    Returns:
        List of SVG lines for the switch details
    """
    svg = []
    svg.append(f'  <!-- Switch details -->')
    svg.append(f'  <text x="30" y="40" font-family="Arial" font-size="16" '
              f'fill="{self.theme_colors["text"]}">{self.switch_name}</text>')
    
    # Add model info if not basic or if a custom model name is provided
    if self.switch_model != SwitchModel.BASIC or self.model_name != self.switch_model.value:
        svg.append(f'  <text x="30" y="60" font-family="Arial" font-size="12" '
                  f'fill="{self.theme_colors["text"]}">Model: {self.model_name}</text>')
    
    return svg


def generate_status_indicators(self, adjusted_width: int) -> List[str]:
    """
    Generate the SVG content for the switch status indicators.
    
    Args:
        adjusted_width: The calculated width of the SVG
        
    Returns:
        List of SVG lines for the status indicators
    """
    svg = []
    svg.append(f'  <!-- Status LEDs -->')
    
    # Use the body_width calculated in calculate_dimensions
    # This ensures consistent positioning with the switch body
    body_width = self.body_width
    
    # Position from the right edge of the switch body
    right_edge = 10 + body_width  # 10px left margin + body width
    
    # For small switches (10 or fewer ports), only show the PWR indicator
    is_small_switch = self.num_ports <= 10
    
    # Position the PWR indicator consistently at the right side of the switch body
    # Calculate the width of the PWR text
    pwr_text = "PWR"
    pwr_text_width = self.get_text_width(pwr_text, font_size=12, font_family="Arial")
    
    # Position PWR text near the right edge with consistent margin
    margin_from_edge = 12  # Reduced margin from right edge
    pwr_text_x = right_edge - pwr_text_width - margin_from_edge
    pwr_circle_x = pwr_text_x - 10  # 10px to the left of the text
    
    svg.append(f'  <circle cx="{pwr_circle_x}" cy="30" r="5" fill="#2ecc71" />')
    svg.append(f'  <text x="{pwr_text_x}" y="35" font-family="Arial" '
              f'font-size="12" fill="{self.theme_colors["text"]}">PWR</text>')
    
    # Only show STATUS and MGMT indicators on larger switches
    if not is_small_switch:
        # Status LED - position relative to PWR
        status_text_width = 50  # Approximate width of "STATUS" text
        status_circle_x = pwr_circle_x - status_text_width - 15  # 15px spacing between indicators
        status_text_x = status_circle_x + 10  # 10px to the right of the circle
        
        svg.append(f'  <circle cx="{status_circle_x}" cy="30" r="5" fill="#f1c40f" />')
        svg.append(f'  <text x="{status_text_x}" y="35" font-family="Arial" '
                  f'font-size="12" fill="{self.theme_colors["text"]}">STATUS</text>')
        
        # Add more indicators for enterprise and data center models - increased spacing
        if self.switch_model in [SwitchModel.ENTERPRISE, SwitchModel.DATA_CENTER]:
            mgmt_text_width = 40  # Approximate width of "MGMT" text
            mgmt_circle_x = status_circle_x - mgmt_text_width - 15  # 15px spacing between indicators
            mgmt_text_x = mgmt_circle_x + 10  # 10px to the right of the circle
            
            svg.append(f'  <circle cx="{mgmt_circle_x}" cy="30" r="5" fill="#3498db" />')
            svg.append(f'  <text x="{mgmt_text_x}" y="35" font-family="Arial" '
                      f'font-size="12" fill="{self.theme_colors["text"]}">MGMT</text>')
    
    return svg


def generate_svg(self) -> str:
    """
    Generate the complete SVG content for the switch.
    
    Returns:
        SVG content as a string
    """
    # Calculate dimensions
    adjusted_width, adjusted_height, ports_per_row, num_rows = self.calculate_dimensions()
    
    # Build SVG content in sections
    svg = []
    
    # Header
    svg.extend(self.generate_svg_header(adjusted_width, adjusted_height))
    
    # Switch body
    svg.extend(self.generate_switch_body(adjusted_width, adjusted_height))
    
    # Switch details
    svg.extend(self.generate_switch_details(adjusted_width))
    
    # Status indicators
    svg.extend(self.generate_status_indicators(adjusted_width))
    
    # Ports
    svg.extend(self.generate_ports(adjusted_width, ports_per_row, num_rows))
    
    # Legend
    svg.extend(self.generate_legend(adjusted_width, adjusted_height))
    
    # Close SVG
    svg.append('</svg>')
    
    return '\n'.join(svg)
